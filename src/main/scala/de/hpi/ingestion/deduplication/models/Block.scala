/*
Copyright 2016-17, Hasso-Plattner-Institut fuer Softwaresystemtechnik GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package de.hpi.ingestion.deduplication.models

import java.util.UUID
import de.hpi.ingestion.datalake.models.Subject
import de.hpi.ingestion.implicits.CollectionImplicits._

/**
  * Represents the a block resulting from a Blocking Scheme.
  * @param id UUID of the block
  * @param key key generated by a blocking scheme which was used to create this block
  * @param subjects Subjects from the subject table in this block
  * @param staging Subjects from the staging table in this block
  */
case class Block(
	id: UUID = UUID.randomUUID(),
	key: String,
	subjects: List[Subject] = Nil,
	staging: List[Subject] = Nil
) {
	/**
	  * Returns the cross product between this blocks subjects and staging subjects.
	  * @return List of 2-Tuples of Subject containing all tuples of the cross product
	  */
	def crossProduct(): List[(Subject, Subject)] = subjects.cross(staging).toList

}
